name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, copilot/* ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run TypeScript Check
      run: npx tsc --noEmit
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: success()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    
    - name: Make gradlew executable
      run: chmod +x ./android/gradlew
    
    - name: Build Android Release APK
      run: |
        cd android
        ./gradlew assembleRelease --no-daemon
    
    - name: Upload Android APK
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: android/app/build/outputs/apk/release/app-release.apk

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '15.2'
    
    - name: Install CocoaPods dependencies
      run: |
        cd ios
        pod install --repo-update
    
    - name: Build iOS
      run: |
        cd ios
        xcodebuild -workspace ThoughtEchoApp.xcworkspace \
          -scheme ThoughtEchoApp \
          -sdk iphoneos \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath $PWD/build/ThoughtEchoApp.xcarchive \
          archive CODE_SIGNING_ALLOWED=NO

  auto-commit:
    name: Auto Commit Successful Build
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: success() && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Setup Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Create success commit
      run: |
        echo "# Build Status" > BUILD_STATUS.md
        echo "" >> BUILD_STATUS.md
        echo "✅ **Latest Build:** Successful" >> BUILD_STATUS.md
        echo "📅 **Date:** $(date)" >> BUILD_STATUS.md
        echo "🔗 **Commit:** ${{ github.sha }}" >> BUILD_STATUS.md
        echo "" >> BUILD_STATUS.md
        echo "## Features" >> BUILD_STATUS.md
        echo "- ✅ React Native with TypeScript" >> BUILD_STATUS.md
        echo "- ✅ SQLite database integration" >> BUILD_STATUS.md
        echo "- ✅ CRUD operations for notes" >> BUILD_STATUS.md
        echo "- ✅ Cross-platform support (iOS/Android)" >> BUILD_STATUS.md
        echo "- ✅ Automated testing" >> BUILD_STATUS.md
        echo "- ✅ CI/CD pipeline" >> BUILD_STATUS.md
        
        git add BUILD_STATUS.md
        
        if ! git diff --staged --quiet; then
          git commit -m "🚀 CI: Update build status - Build successful for commit ${{ github.sha }}"
          git push origin ${{ github.ref_name }}
        else
          echo "No changes to commit"
        fi

  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [auto-commit]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.auto-commit.result == 'success'
      run: |
        echo "🎉 Build and tests completed successfully!"
        echo "📱 Android APK and iOS build artifacts are ready"
        echo "📝 Build status has been updated"
    
    - name: Notify Failure
      if: failure()
      run: |
        echo "❌ Build failed. Please check the logs and fix the issues."